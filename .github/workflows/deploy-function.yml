---
name: Deploy

on:
  push:
    branches:
      - feature/nexhealth
# TODO Kyle: Correct branches
#      - development
#      - 'hotfix/**'
#      - 'release/**'
#      - main

concurrency:
  group: ci-${{ github.ref }}

jobs:
  setup_environment:
    runs-on: ubuntu-latest
    outputs:
      gcp_env: ${{ steps.setenv.outputs.GCP_ENV }}
      base_name: ${{ steps.setenv.outputs.BASE_NAME }}
      region: ${{ steps.setenv.outputs.REGION }}
      gcp_project: ${{ steps.setenv.outputs.GCP_PROJECT }}
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Set deployment variables
        run: |
          echo "BASE_NAME=peerlogic-api" >> $GITHUB_OUTPUT
          echo "REGION=us-west4" >> $GITHUB_OUTPUT
# TODO Kyle: Remove the next two since they're conditional
          echo "GCP_ENV=dev" >> $GITHUB_OUTPUT
          echo "GCP_PROJECT=148263976475" >> $GITHUB_OUTPUT
# TODO Kyle: Put these conditionals back minus the seds
#          if [[ ${{ github.ref }} == "refs/heads/main" ]]
#          then
#          echo "GCP_ENV=prod" >> $GITHUB_OUTPUT
#          echo "GCP_PROJECT=339409233783" >> $GITHUB_OUTPUT
#          elif [[ ${{ github.ref }} == "refs/heads/development" ]]
#          then
#          echo "GCP_ENV=dev" >> $GITHUB_OUTPUT
#          echo "GCP_PROJECT=148263976475" >> $GITHUB_OUTPUT
#          else
#          echo "GCP_ENV=stage" >> $GITHUB_OUTPUT
#          echo "GCP_PROJECT=945726277583" >> $GITHUB_OUTPUT
#          fi


# BEGIN Cloud Function Jobs - Do not edit above this line normally ---------------------------------------------------------------------------------------------
  deploy_cloud_function_foo:
    runs-on: ubuntu-latest
    needs: setup_environment
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Authenticate to GCP
        id: auth
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: "projects/${{ needs.deploy_cloud_function.outputs.gcp_project }}/locations/global/workloadIdentityPools/${{ needs.deploy_cloud_function.outputs.base_name }}/providers/${{ needs.deploy_cloud_function.outputs.base_name }}"
          service_account: "github-sa@peerlogic-api-${{ needs.deploy_cloud_function.outputs.gcp_env }}.iam.gserviceaccount.com"

      - name: Copy requirements.txt to root
        run: |
          cp requirements/requirements.txt requirements.txt

      - name: Deploy Cloud Function - Foo
        uses: 'google-github-actions/deploy-cloud-functions@v0'
        with:
          deploy_timeout: 900
          entry_point: nexhealth_foo
          env_vars: "REGION=${{ needs.deploy_cloud_function.outputs.region }},GOOGLE_CLOUD_PROJECT=peerlogic-api-${{ needs.deploy_cloud_function.outputs.gcp_env }}"
          event_trigger_resource: projects/peerlogic-api-${{ needs.deploy_cloud_function.outputs.gcp_env }}/topics/${{ needs.deploy_cloud_function.outputs.gcp_env }}-foo
          event_trigger_retry: true
          event_trigger_type: google.pubsub.topic.publish
          max_instances: 1
          memory_mb: 512
          name: "cf-${{ needs.deploy_cloud_function.outputs.gcp_env }}-${{ needs.deploy_cloud_function.outputs.base_name }}-foo"
          project_id: "peerlogic-api-${{ needs.deploy_cloud_function.outputs.gcp_env }}"
          region: "${{ needs.deploy_cloud_function.outputs.region }}"
          runtime: 'python39'
          source_dir: .
          timeout: 540
          vpc_connector: "projects/peerlogic-api-${{ needs.deploy_cloud_function.outputs.gcp_env }}/locations/${{ needs.deploy_cloud_function.outputs.region }}/connectors/peerlogic-api-${{ needs.deploy_cloud_function.outputs.gcp_env }}"

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'

      - name: Configure deadletter - Foo
        run: |
          gcloud pubsub subscriptions update \
          "gcf-cf-${{ needs.deploy_cloud_function.outputs.gcp_env }}-${{ needs.deploy_cloud_function.outputs.base_name }}-foo-${{ needs.deploy_cloud_function.outputs.region }}-${{ needs.deploy_cloud_function.outputs.gcp_env }}-foo" \
          --dead-letter-topic="${{ needs.deploy_cloud_function.outputs.gcp_env }}-foo-failed" \
          --dead-letter-topic-project="peerlogic-api-${{ needs.deploy_cloud_function.outputs.gcp_env }}" \
          --max-delivery-attempts=6 \
          --min-retry-delay=2m
# END Cloud Function Jobs - Do not edit below this line normally -----------------------------------------------------------------------------------------------

  slackSuccessNotification:
    needs:
      - deploy_cloud_function_foo
    name: Slack Notification
    uses: rtCamp/action-slack-notify@v2
    steps:
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: ${{ needs.deploy_cloud_function.outputs.gcp_env }}-deployments
          SLACK_COLOR: '#3278BD'
          SLACK_TITLE: Cloud Function Deploys Complete
          SLACK_USERNAME: Deploying Functions for ${{ needs.deploy_cloud_function.outputs.base_name }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_ICON_EMOJI: github

  slackFailureNotification:
    needs:
      - deploy_cloud_function_foo
    runs-on: ubuntu-latest
    if: always()
    name: Slack Failure Notification
    steps:
      # run this action to get workflow conclusion
      # You can get conclusion via env (env.WORKFLOW_CONCLUSION)
      - uses: technote-space/workflow-conclusion-action@v2
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: ${{ needs.deploy_cloud_function.outputs.gcp_env }}-deployments
          SLACK_COLOR: '#f54242'
          SLACK_TITLE: Function Deploy or PubSub Config Failed
          SLACK_USERNAME: ${{ needs.deploy_cloud_function.outputs.base_name }}
          SLACK_MESSAGE: Workflow Failed
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_ICON_EMOJI: boom
          MSG_MINIMAL: true
        if: env.WORKFLOW_CONCLUSION == 'failure'  # notify only if failure
