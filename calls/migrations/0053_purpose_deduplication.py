# Generated by Django 3.2.15 on 2022-09-24 00:44
import logging
from collections import defaultdict

from django.db import migrations

# Get an instance of a logger
log = logging.getLogger(__name__)


def deduplicate_purposes(apps, schema_editor):
    """
    We can't import the model directly as it may be a newer version than this migration expects. We use the historical version.
    """

    Call = apps.get_model("calls", "Call")
    calls = Call.objects.all().prefetch_related("call_purposes")

    cps_removed = []
    cos_removed = []
    cors_removed = []
    for call in calls:
        if not hasattr(call, "call_purposes"):
            log.info(f"Ignoring call that has no purposes: {call.id}")
            continue

        # slice by type
        # slice every non-first element
        # iterate and delete
        # delete call_outcomes
        # delete call_outcome_reasons

        purpose_type_to_purpose = defaultdict(list)
        for cp in call.call_purposes.order_by("-modified_at").all():
            purpose_type_to_purpose[cp.call_purpose_type].append(cp)

        for _, cps in purpose_type_to_purpose.items():
            cps_to_remove = cps[1:]
            for cp in cps_to_remove:
                cp_id = cp.id
                log.info(f"Deleting duplicate call_purpose with id='{cp_id}' type={cp.call_purpose_type}")

                # call outcomes are allowed nullable foreign references, we have to clean them up
                # could we wait until the end and select all with null reference? yes, but we wouldn't
                # know whether we were cleaning up artifacts of other processes that may be from other
                # bugs
                cos = [co for co in cp.outcome_results.all()]
                for co in cos:
                    co_id = co.id
                    log.info(f"Deleting related call_outcome with id='{co_id}'")

                    # outcomes_reasons are allowed nullable foreign references, we have to clean them up
                    cors = [cor for cor in co.outcome_reason_results.all()]
                    for cor in cors:
                        cor_id = cor.id
                        log.info(f"Deleting related call_outcome_result with id='{cor_id}'")
                        cor.delete()
                        cors_removed.append(cor_id)

                    co.delete()
                    cos_removed.append(co_id)

                cp.delete()
                cps_removed.append(cp_id)

    log.info(f"Deleted duplicate call_purpose records with ids: {cps_removed}")
    log.info(f"Deleted related call_outcomes records with ids: {cos_removed}")
    log.info(f"Deleted related call_outcome_reason records with ids: {cors_removed}")


def reduplicate_purposes(apps, schema_editor):
    """Impossible to do unless we're storing the duplicates in a temporary table."""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("calls", "0052_outcome_unique_per_purpose"),
    ]

    operations = [
        migrations.RunPython(deduplicate_purposes, reduplicate_purposes),
    ]
