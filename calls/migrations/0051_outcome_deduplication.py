# Generated by Django 3.2.15 on 2022-09-23 23:06
import logging

import django.db.models.deletion
from django.db import migrations, models

# Get an instance of a logger
log = logging.getLogger(__name__)


def deduplicate_outcomes(apps, schema_editor):
    """
    We can't import the model directly as it may be a newer version than this migration expects. We use the historical version.
    """
    CallPurpose = apps.get_model("calls", "CallPurpose")
    cps = CallPurpose.objects.all().prefetch_related("outcome_results")

    cos_removed = []
    # cors_removed = []
    for cp in cps:
        if not hasattr(cp, "outcome_results"):
            log.info(f"Ignoring call_purpose that has no outcome_results: {cp.id}")
            continue

        cos = [co for co in cp.outcome_results.order_by("modified_at")]
        cos_to_remove = cos[1:]  # take all older ones
        for co in cos_to_remove:
            co_id = co.id
            log.info(f"Deleting duplicate call_outcome with id='{co_id}' type={co.call_outcome_type}")

            cors = [cor for cor in co.outcome_reason_results.all()]
            for cor in cors:
                cor.delete()

            co.delete()
            cos_removed.append(co_id)

    log.info(f"Deleted duplicate agent engaged with records with ids: {cos_removed}")


def reduplicate_outcomes(apps, schema_editor):
    """Impossible to do unless we're storing the duplicates in a temporary table."""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("calls", "0050_unique_assigned_agent_and_agent_engaged_with"),
    ]

    operations = [
        migrations.RunPython(deduplicate_outcomes, reduplicate_outcomes),
    ]
