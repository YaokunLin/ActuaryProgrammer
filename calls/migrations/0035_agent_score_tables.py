# Generated by Django 3.2.14 on 2022-08-02 22:45

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields
import django_userforeignkey.models.fields

from calls.analytics.interactions.field_choices import AgentInteractionGroupType, AgentInteractionMetricTypes


# DO NOT USE THIS IN THE CODE
# THIS IS SUPPOSED TO BE CONFIGURED VIA THE RDBMS
# THIS ONLY OCCURS HERE FOR FIRST INSERT
METRIC_TO_GROUP_MAP = {
    AgentInteractionMetricTypes.GREETING: AgentInteractionGroupType.INTRO,
    AgentInteractionMetricTypes.ANNOUNCED_NAME: AgentInteractionGroupType.INTRO,
    AgentInteractionMetricTypes.OFFERED_ASSISTANCE: AgentInteractionGroupType.INTRO,
    AgentInteractionMetricTypes.STATED_BUSINESS_NAME: AgentInteractionGroupType.INTRO,

    AgentInteractionMetricTypes.ASKED_PATIENT_NAME: AgentInteractionGroupType.SURVEY,
    AgentInteractionMetricTypes.ASKED_PATIENT_CONTACT_INFO: AgentInteractionGroupType.SURVEY,
    AgentInteractionMetricTypes.ASKED_PATIENT_PURPOSE: AgentInteractionGroupType.SURVEY,
    AgentInteractionMetricTypes.ASKED_REFERRING_SOURCE: AgentInteractionGroupType.SURVEY,

    AgentInteractionMetricTypes.MENTIONED_PROCEDURE: AgentInteractionGroupType.SELLING,
    AgentInteractionMetricTypes.MENTIONED_INSURANCE_COVERAGE: AgentInteractionGroupType.SELLING,
    AgentInteractionMetricTypes.MENTIONED_FINANCING: AgentInteractionGroupType.SELLING,
    AgentInteractionMetricTypes.OFFERED_FREE_CONSULTATION: AgentInteractionGroupType.SELLING,

    AgentInteractionMetricTypes.AGENT_OVERTALK: AgentInteractionGroupType.RAPPORT,
    AgentInteractionMetricTypes.HOLD_TIME: AgentInteractionGroupType.RAPPORT,
    AgentInteractionMetricTypes.ASKED_ABOUT_DISCOMFORT: AgentInteractionGroupType.RAPPORT,
    AgentInteractionMetricTypes.MENTIONED_PRICING: AgentInteractionGroupType.RAPPORT,

    AgentInteractionMetricTypes.OFFERED_APPOINTMENT_DATE_TIME: AgentInteractionGroupType.CONVERT,
    AgentInteractionMetricTypes.BOOKED_APPOINTMENT: AgentInteractionGroupType.CONVERT,
}

def insert_agent_score_groups(apps, schema_editor):
    """
    We can't import the model directly as it may be a newer version than this migration expects. We use the historical version.
    """
    AgentCallScoreMetric = apps.get_model("calls", "AgentCallScoreMetric")
    for metric, group in METRIC_TO_GROUP_MAP.items():
        print(f"Inserting: {metric.name} {metric.value} {metric.label}")
        agent_call_score_metric, created = AgentCallScoreMetric.objects.get_or_create(metric=metric.value, group=group)


def reverse_insert_agent_score_groups(apps, schema_editor):
    AgentCallScoreMetric = apps.get_model("calls", "AgentCallScoreMetric")
    for metric, group in METRIC_TO_GROUP_MAP.items():
        print(f"Removing: {metric.name} {metric.value} {metric.label}")
        agent_call_score_metric = AgentCallScoreMetric.objects.get(metric=metric.value, group=group)
        agent_call_score_metric.delete()


def update_agent_score_metrics(apps, schema_editor):
    AgentCallScoreMetric = apps.get_model("calls", "AgentCallScoreMetric")
    score_metrics = AgentCallScoreMetric.objects.all()
    new_score_metric_to_id = { sm.metric: sm.pk for sm in score_metrics }

    # find the appropriate ids
    old_metric_to_new_metric_id = {
        "agent_overtalk": new_score_metric_to_id[AgentInteractionMetricTypes.AGENT_OVERTALK.value],
        "scheduling_accommodations": new_score_metric_to_id[AgentInteractionMetricTypes.OFFERED_APPOINTMENT_DATE_TIME.value],
        "referral_source": new_score_metric_to_id[AgentInteractionMetricTypes.ASKED_REFERRING_SOURCE.value],
        "procedure_explanation": new_score_metric_to_id[AgentInteractionMetricTypes.MENTIONED_PROCEDURE.value],
        "patient_demographics": new_score_metric_to_id[AgentInteractionMetricTypes.ASKED_PATIENT_CONTACT_INFO.value],
        "payment_method": new_score_metric_to_id[AgentInteractionMetricTypes.MENTIONED_PRICING.value],
        "greeting": new_score_metric_to_id[AgentInteractionMetricTypes.GREETING.value],
    }

    AgentCallScore = apps.get_model("calls", "AgentCallScore")
    for old_metric, new_metric_id in old_metric_to_new_metric_id.items():
        AgentCallScore.objects.filter(metric=old_metric).update(metric=new_metric_id)


def reverse_update_agent_scores(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('calls', '0034_auto_20220727_2044'),
    ]

    operations = [
        migrations.CreateModel(
            name='AgentCallScoreMetric',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('modified_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('id', django_extensions.db.fields.ShortUUIDField(blank=True, editable=False, primary_key=True, serialize=False)),
                ('metric', models.CharField(choices=[('greeting', 'Clear Well Spoken Greeting'), ('announced_name', 'Announced Name'), ('offered_assistance', 'Offered Assistance'), ('stated_business_name', 'Stated Business Name'), ('asked_patient_name', "Asked for the Patient's Name"), ('asked_patient_contact_info', "Asked for the Patient's Contact Information"), ('asked_patient_purpose', "Asked for the Patient's Purpose"), ('asked_referring_source', 'Asked About Referring Source'), ('mentioned_procedure', 'Mentioned Procedure Information'), ('mentioned_insurance_coverage', 'Mentioned Insurance Coverage'), ('mentioned_financing', 'Mentioned Financing / Discount Club / Payment Plans'), ('offered_free_consultation', 'Offered a Free Consultation'), ('agent_overtalk', 'Listened Enough (Limited Overtalk)'), ('hold_time', 'Acceptable Hold Time Length'), ('asked_about_discomfort', 'Asked About Discomfort'), ('mentioned_pricing', 'Mentioned Pricing'), ('offered_appointment_date_time', 'Offered Appointment Date / Time'), ('booked_appointment', 'Booked the Appointment')], max_length=180)),
                ('group', models.CharField(choices=[('introduction', 'Intro'), ('survey', 'Survey'), ('selling', 'Selling'), ('rapport', 'Rapport'), ('convert', 'Convert')], max_length=180)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='agentcallscoremetric_created', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='agentcallscoremetric_modified', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
            ],
            options={
                'get_latest_by': 'modified_at',
                'abstract': False,
            },
        ),
        migrations.RunPython(insert_agent_score_groups, reverse_insert_agent_score_groups),
        migrations.AlterField(
            model_name='agentcallscore',
            name='metric',
            field=models.CharField(blank=True, max_length=180),
        ),
        migrations.RunPython(update_agent_score_metrics, reverse_update_agent_scores),
        migrations.AlterField(
            model_name='agentcallscore',
            name='metric',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='agent_call_scores', to='calls.agentcallscoremetric'),
        ),
    ]
