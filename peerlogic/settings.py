"""
Django settings for peerlogic project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""


from datetime import timedelta
import io
import logging
import os

import boto3 as boto3
from dotenv import load_dotenv
from google.cloud import (
    pubsub_v1,
    secretmanager,
    storage,
)
import requests
from requests.auth import HTTPBasicAuth


# Get an instance of a logger
log = logging.getLogger(__name__)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
}

PROJECT_ID = os.getenv("PROJECT_ID", "peerlogic-api-dev")
GOOGLE_CLOUD_PROJECT = os.environ.get("GOOGLE_CLOUD_PROJECT", None)  # WE'RE IN GCP
IN_GCP = GOOGLE_CLOUD_PROJECT != None
# TODO: get region from vm metadata: https://cloud.google.com/compute/docs/metadata/default-metadata-values
# https://cloud.google.com/appengine/docs/flexible/python/runtime#environment_variables
REGION = os.environ.get("REGION", "us-west4")
PROJECT_NUMBER = os.getenv("PROJECT_NUMBER", "148263976475")
ENV_CONFIG_SECRET_NAME = os.environ.get("ENV_CONFIG_SECRET_NAME", "peerlogic-api-env")

if IN_GCP:
    # Pull secrets from Secret Manager
    PROJECT_ID = os.environ.get("GOOGLE_CLOUD_PROJECT")

    client = secretmanager.SecretManagerServiceClient()
    name = f"projects/{PROJECT_ID}/secrets/{ENV_CONFIG_SECRET_NAME}/versions/latest"
    payload = client.access_secret_version(name=name).payload.data.decode("UTF-8")

    load_dotenv(stream=io.StringIO(payload))
else:
    load_dotenv()

GKE_APPLICATION = os.getenv("GKE_APPLICATION", False)

DEBUG = os.getenv("DJANGO_DEBUG", "True") == "True"

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")

ALLOWED_HOSTS = ["127.0.0.1", "localhost", os.getenv("DJANGO_ALLOWED_HOSTS", "*")]
if GKE_APPLICATION == "True":
    ALLOWED_HOSTS.append(os.getenv("KUBERNETES_SERVICE_HOST"))

PEERLOGIC_VOIP_PROVIDER_ID = os.getenv("PEERLOGIC_VOIP_PROVIDER_ID", "drFoXEnEwrN28Gowp3CoRN")
PEERLOGIC_PRACTICE_ID = os.getenv("PEERLOGIC_PRACTICE_ID", "bpQY6L8zE96SVqCUXTPYq3")
PEERLOGIC_PRACTICE_TELECOM_ID = os.getenv("PEERLOGIC_PRACTICE_TELECOM_ID", "N8UBbUVQ4nM3BUZPcZUBdN")
PEERLOGIC_NETSAPIENS_API_CREDENTIALS_ID = os.getenv("PEERLOGIC_NETSAPIENS_API_CREDENTIALS_ID", "FMMfbRH2KtK26GsmfDvm69")
IS_STAFF_TELECOM_DOMAIN = os.getenv("IS_STAFF_TELECOM_DOMAIN", "Peerlogic")

# Bandwidth
BANDWIDTH_APPLICATION_ID = os.getenv("BANDWIDTH_APPLICATION_ID")
BANDWIDTH_MESSAGING_URI = os.getenv("BANDWIDTH_MESSAGING_URI")
BANDWIDTH_API_USERNAME = os.getenv("BANDWIDTH_API_USERNAME")
BANDWIDTH_API_PASSWORD = os.getenv("BANDWIDTH_API_PASSWORD")
BANDWIDTH_CLIENT = requests.Session()
BANDWIDTH_CLIENT.auth = HTTPBasicAuth(BANDWIDTH_API_USERNAME, BANDWIDTH_API_PASSWORD)

# Netsapiens Communications Info
NETSAPIENS_CLIENT_ID = os.getenv("NETSAPIENS_CLIENT_ID")
NETSAPIENS_CLIENT_SECRET = os.getenv("NETSAPIENS_CLIENT_SECRET")
NETSAPIENS_BASE_URL = os.getenv("NETSAPIENS_BASE_URL")
NETSAPIENS_ACCESS_TOKEN_URL = os.getenv("NETSAPIENS_ACCESS_TOKEN_URL")
NETSAPIENS_INTROSPECT_TOKEN_URL = os.getenv("NETSAPIENS_INTROSPECT_TOKEN_URL")
NETSAPIENS_API_USERNAME = os.getenv("NETSAPIENS_API_USERNAME")
NETSAPIENS_API_PASSWORD = os.getenv("NETSAPIENS_API_PASSWORD")
NETSAPIENS_SYSTEM_CLIENT = requests.Session()
NETSAPIENS_INTEGRATION_CALL_MODEL_SUBSCRIPTION_IS_ENABLED = os.getenv("NETSAPIENS_INTEGRATION_CALL_MODEL_SUBSCRIPTION_IS_ENABLED", "False").lower() in (
    "true",
    "1",
    "t",
)
NETSAPIENS_INTEGRATION_CALL_ORIGID_MODEL_SUBSCRIPTION_IS_ENABLED = os.getenv(
    "NETSAPIENS_INTEGRATION_CALL_ORIGID_MODEL_SUBSCRIPTION_IS_ENABLED", "False"
).lower() in ("true", "1", "t")

# Business Phone Number Detection
# See FCC: https://www.fcc.gov/consumers/guides/what-toll-free-number-and-how-does-it-work
TELECOM_AREA_CODES_TO_MARK_AS_BUSINESS_NUMBERS = os.getenv("AREA_CODES_TO_MARK_AS_BUSINESS_NUMBERS", ["800", "888", "877", "866", "855", "844", "833"])

# Twilio API CNAM / Phone Lookup Support
TWILIO_ACCOUNT_SID = os.getenv("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = os.getenv("TWILIO_AUTH_TOKEN")
TWILIO_IS_ENABLED = os.getenv("TWILIO_IS_ENABLED", "False").lower() in ("true", "1", "t")

TELECOM_CALLER_NAME_INFO_MAX_AGE_IN_SECONDS_DEFAULT = 60 * 60 * 24 * 365  # seconds in a year
try:
    env_var = os.getenv("TELECOM_CALLER_NAME_INFO_MAX_AGE_IN_SECONDS")
    TELECOM_CALLER_NAME_INFO_MAX_AGE_IN_SECONDS = int(env_var)
except (ValueError, TypeError) as error:
    if env_var != None:
        log.exception(error)
    log.info(f"Setting TELECOM_CALLER_NAME_INFO_MAX_AGE_IN_SECONDS to the default of {TELECOM_CALLER_NAME_INFO_MAX_AGE_IN_SECONDS_DEFAULT}")
    TELECOM_CALLER_NAME_INFO_MAX_AGE_IN_SECONDS = TELECOM_CALLER_NAME_INFO_MAX_AGE_IN_SECONDS_DEFAULT

# Google Cloud Storage

CLOUD_STORAGE_IS_ENABLED = os.getenv("CLOUD_STORAGE_IS_ENABLED", "False").lower() in ("true", "1", "t")
BUCKET_NAME_CALL_AUDIO = os.getenv("BUCKET_NAME_CALL_AUDIO")
BUCKET_NAME_CALL_AUDIO_PARTIAL = os.getenv("BUCKET_NAME_CALL_AUDIO_PARTIAL")
BUCKET_NAME_CALL_TRANSCRIPT = os.getenv("BUCKET_NAME_CALL_TRANSCRIPT")
BUCKET_NAME_CALL_TRANSCRIPT_PARTIAL = os.getenv("BUCKET_NAME_CALL_TRANSCRIPT_PARTIAL")
BUCKET_NAME_BQ_CALL_ANALYTICS_EXTRACTS = os.getenv("BUCKET_NAME_BQ_CALL_ANALYTICS_EXTRACTS")
SIGNED_STORAGE_URL_EXPIRATION_IN_HOURS_DEFAULT = 2
try:
    env_var = os.getenv("SIGNED_STORAGE_URL_EXPIRATION_IN_HOURS")
    SIGNED_STORAGE_URL_EXPIRATION_IN_HOURS = int(env_var)
except (ValueError, TypeError) as error:
    if env_var != None:
        log.exception(error)
    log.info(f"Setting SIGNED_STORAGE_URL_EXPIRATION_IN_HOURS to the default of {SIGNED_STORAGE_URL_EXPIRATION_IN_HOURS_DEFAULT}")
    SIGNED_STORAGE_URL_EXPIRATION_IN_HOURS = SIGNED_STORAGE_URL_EXPIRATION_IN_HOURS_DEFAULT


SIGNED_STORAGE_URL_EXPIRATION_DELTA = timedelta(hours=SIGNED_STORAGE_URL_EXPIRATION_IN_HOURS)
if CLOUD_STORAGE_IS_ENABLED:
    CLOUD_STORAGE_CLIENT = storage.Client(project=PROJECT_ID)
else:
    CLOUD_STORAGE_CLIENT = None

# CORS
CORS_ALLOW_ALL_ORIGINS = True
# TODO: Figure out how to pass lists via .env files
# CORS_ALLOWED_ORIGIN_REGEXES = [r"^https://\w+\.peerlogic\.tech$", r"^https://peerlogic\.tech$", r"^http://localhost:8080$", r"^app://\..*$"]


# DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
AUTH_USER_MODEL = "core.User"

# Pub/Sub
PUBLISHER_IS_ENABLED = os.getenv("PUBLISHER_IS_ENABLED", "False").lower() in ("true", "1", "t")

PEERLOGIC_STREAM_KEY = os.getenv("PEERLOGIC_STREAM_KEY")
ML_PROCESS_SHOULD_RUN_TRANSCRIPTION = os.getenv("ML_PROCESS_SHOULD_RUN_TRANSCRIPTION", "False")
ML_PROCESS_ARGUMENTS = {
    "streaming_key": PEERLOGIC_STREAM_KEY,
    "run_transcription": ML_PROCESS_SHOULD_RUN_TRANSCRIPTION,
}

PUBSUB_TOPIC_ID_CALL_AUDIO_PARTIAL_SAVED = os.getenv("PUBSUB_TOPIC_ID_CALL_AUDIO_PARTIAL_SAVED", "dev-call_audio_partial_saved")
PUBSUB_TOPIC_ID_CALL_AUDIO_PARTIAL_SAVED_PROJECT_ID = os.getenv("PUBSUB_TOPIC_ID_CALL_AUDIO_PARTIAL_SAVED_PROJECT_ID", PROJECT_ID)

PUBSUB_TOPIC_ID_CALL_AUDIO_SAVED = os.getenv("PUBSUB_TOPIC_ID_CALL_AUDIO_SAVED", "dev-call_audio_saved")
PUBSUB_TOPIC_ID_CALL_AUDIO_SAVED_PROJECT_ID = os.getenv("PUBSUB_TOPIC_ID_CALL_AUDIO_SAVED_PROJECT_ID", PROJECT_ID)

PUBSUB_TOPIC_ID_CALL_TRANSCRIPT_SAVED = os.getenv("PUBSUB_TOPIC_ID_CALL_TRANSCRIPT_SAVED", "dev-call_transcript_saved")
PUBSUB_TOPIC_ID_CALL_TRANSCRIPT_SAVED_PROJECT_ID = os.getenv("PUBSUB_TOPIC_ID_CALL_TRANSCRIPT_SAVED_PROJECT_ID", PROJECT_ID)

PUBSUB_TOPIC_ID_NETSAPIENS_LEG_B_FINISHED = os.getenv("PUBSUB_TOPIC_ID_NETSAPIENS_LEG_B_FINISHED", "dev-netsapiens-leg_b_finished")
PUBSUB_TOPIC_ID_NETSAPIENS_LEG_B_FINISHED_PROJECT_ID = os.getenv("PUBSUB_TOPIC_ID_NETSAPIENS_LEG_B_FINISHED_PROJECT_ID", PROJECT_ID)

PUBSUB_TOPIC_ID_NETSAPIENS_CDR_SAVED = os.getenv("PUBSUB_TOPIC_ID_NETSAPIENS_CDR_SAVED", "dev-netsapiens-cdr_saved")
PUBSUB_TOPIC_ID_NETSAPIENS_CDR_SAVED_PROJECT_ID = os.getenv("PUBSUB_TOPIC_ID_NETSAPIENS_CDR_SAVED_PROJECT_ID", PROJECT_ID)

PUBSUB_TOPIC_ID_NETSAPIENS_CDR_LINKED_TO_CALL_PARTIAL = os.getenv(
    "PUBSUB_TOPIC_ID_NETSAPIENS_CDR_LINKED_TO_CALL_PARTIAL", "dev-netsapiens-cdr_linked_to_call_partial"
)
PUBSUB_TOPIC_ID_NETSAPIENS_CDR_LINKED_TO_CALL_PARTIAL_PROJECT_ID = os.getenv("PUBSUB_TOPIC_ID_NETSAPIENS_CDR_LINKED_TO_CALL_PARTIAL_PROJECT_ID", PROJECT_ID)

PUBLISH_FUTURE_TIMEOUT_IN_SECONDS_DEFAULT = 60
try:
    env_var = os.getenv("PUBLISH_FUTURE_TIMEOUT_IN_SECONDS")
    PUBLISH_FUTURE_TIMEOUT_IN_SECONDS = int(env_var)
except (ValueError, TypeError) as error:
    if env_var != None:
        log.exception(error)
    log.info(f"Setting PUBLISH_FUTURE_TIMEOUT_IN_SECONDS to the default of {PUBLISH_FUTURE_TIMEOUT_IN_SECONDS_DEFAULT}")
    PUBLISH_FUTURE_TIMEOUT_IN_SECONDS = PUBLISH_FUTURE_TIMEOUT_IN_SECONDS_DEFAULT
if PUBLISHER_IS_ENABLED:
    PUBLISHER = pubsub_v1.PublisherClient()
    PUBSUB_TOPIC_PATH_NETSAPIENS_LEG_B_FINISHED = PUBLISHER.topic_path(
        PUBSUB_TOPIC_ID_NETSAPIENS_LEG_B_FINISHED_PROJECT_ID, PUBSUB_TOPIC_ID_NETSAPIENS_LEG_B_FINISHED
    )
    PUBSUB_TOPIC_PATH_NETSAPIENS_CDR_SAVED = PUBLISHER.topic_path(PUBSUB_TOPIC_ID_NETSAPIENS_CDR_SAVED_PROJECT_ID, PUBSUB_TOPIC_ID_NETSAPIENS_CDR_SAVED)
    PUBSUB_TOPIC_PATH_NETSAPIENS_CDR_LINKED_TO_CALL_PARTIAL = PUBLISHER.topic_path(
        PUBSUB_TOPIC_ID_NETSAPIENS_CDR_LINKED_TO_CALL_PARTIAL_PROJECT_ID, PUBSUB_TOPIC_ID_NETSAPIENS_CDR_LINKED_TO_CALL_PARTIAL
    )
    PUBSUB_TOPIC_PATH_CALL_AUDIO_PARTIAL_SAVED = PUBLISHER.topic_path(
        PUBSUB_TOPIC_ID_CALL_AUDIO_PARTIAL_SAVED_PROJECT_ID, PUBSUB_TOPIC_ID_CALL_AUDIO_PARTIAL_SAVED
    )
    PUBSUB_TOPIC_PATH_CALL_AUDIO_SAVED = PUBLISHER.topic_path(PUBSUB_TOPIC_ID_CALL_AUDIO_SAVED_PROJECT_ID, PUBSUB_TOPIC_ID_CALL_AUDIO_SAVED)
    PUBSUB_TOPIC_PATH_CALL_TRANSCRIPT_SAVED = PUBLISHER.topic_path(PUBSUB_TOPIC_ID_CALL_TRANSCRIPT_SAVED_PROJECT_ID, PUBSUB_TOPIC_ID_CALL_TRANSCRIPT_SAVED)

else:
    PUBLISHER = None
    PUBSUB_TOPIC_PATH_NETSAPIENS_LEG_B_FINISHED = None
    PUBSUB_TOPIC_PATH_NETSAPIENS_CDR_SAVED = None
    PUBSUB_TOPIC_PATH_NETSAPIENS_CDR_LINKED_TO_CALL_PARTIAL = None
    PUBSUB_TOPIC_PATH_CALL_AUDIO_PARTIAL_SAVED = None
    PUBSUB_TOPIC_PATH_CALL_AUDIO_SAVED = None
    PUBSUB_TOPIC_PATH_CALL_TRANSCRIPT_SAVED = None


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_celery_beat",
    "django_extensions",
    "django_filters",
    "phonenumber_field",
    "rest_framework",
    "oauth2_provider",
    "peerlogic_admin",
    "corsheaders",
    "care",
    "core",
    "calls",
    "etl",
    "inbox",
    "ml",
    "netsapiens_integration",
    "jive_integration",
    "reminders",
    "fixture_magic",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    # CorsMiddleware should be placed as high as possible, especially before any middleware that can generate responses such as Django’s CommonMiddleware If
    # it is not before, it will not be able to add the CORS headers to these responses.
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_userforeignkey.middleware.UserForeignKeyMiddleware",
]

ROOT_URLCONF = "peerlogic.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "peerlogic.wsgi.application"

# OAUTH toolkit
LOGIN_URL = "/admin/login/"
OAUTH2_PROVIDER = {
    # this is the list of available oauth scopes
    # TODO: refine, these are the generic tutorial ones.
    "SCOPES": {"read": "Read scope", "write": "Write scope", "groups": "Access to your groups"}
}


# Auth0 User login
AUTH0_AUDIENCE = os.getenv("AUTH0_AUDIENCE")
AUTH0_DOMAIN = os.getenv("AUTH0_DOMAIN")

SIMPLE_JWT = {
    "ALGORITHM": "RS256",
    "JWK_URL": f"https://{AUTH0_DOMAIN}/.well-known/jwks.json",
    "AUDIENCE": AUTH0_AUDIENCE,
    "USER_ID_FIELD": "auth0_id",
    "ISSUER": f"https://{AUTH0_DOMAIN}/",
    "USER_ID_CLAIM": "sub",
    "AUTH_TOKEN_CLASSES": ("authz.tokens.Auth0Token",),
}

# Auth0 Machine User ID
AUTH0_MACHINE_CLIENT_ID = os.getenv("AUTH0_MACHINE_CLIENT_ID")
AUTH0_MACHINE_USER_ID = os.getenv("AUTH0_MACHINE_USER_ID")


# DRF
MAX_PAGE_SIZE = os.getenv("MAX_PAGE_SIZE", 100)
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "core.authentication.NetsapiensJSONWebTokenAuthentication",
        "core.authentication.ClientCredentialsUserAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.IsAuthenticated"],
    "DEFAULT_PAGINATION_CLASS": "core.pagination.IncludePageSizePagination",
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ],
    "PAGE_SIZE": 50,
}

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases


# [START dbconfig]
DB_HOST = os.getenv("DB_HOST", "127.0.0.1")
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("POSTGRES_USER"),
        "USER": os.getenv("POSTGRES_DB"),
        "PASSWORD": os.getenv("POSTGRES_PEERLOGIC_PASSWORD"),
        "HOST": DB_HOST,
        "PORT": "5432",
    }
}
# [END dbconfig]

# Use a in-memory sqlite3 database when testing in CI systems
if os.getenv("TRAMPOLINE_CI", None):
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

# [START staticurl]
if GKE_APPLICATION == "True":
    STATIC_BUCKET_NAME = PROJECT_ID
    STATIC_URL = f"https://storage.googleapis.com/{STATIC_BUCKET_NAME}/static/"
    STATIC_ROOT = "static/"
else:  # app engine or local
    STATIC_URL = "/static/"
    STATIC_ROOT = "static"
    STATICFILES_DIRS = []
# [END staticurl]


# Celery Configuration Options
CELERY_ENABLE_UTC = True
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60
CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", "redis://localhost:6379/0")
CELERY_RESULT_BACKEND = os.getenv("CELERY_RESULT_BACKEND", CELERY_BROKER_URL)

# Admin
X_FRAME_OPTIONS = "SAMEORIGIN"

JIVE_CLIENT_ID = os.getenv("JIVE_CLIENT_ID", "")
JIVE_CLIENT_SECRET = os.getenv("JIVE_CLIENT_SECRET", "")

JIVE_BUCKET_NAME = os.getenv("JIVE_BUCKET_NAME", "")
JIVE_BUCKET_ACCESS_KEY = os.getenv("JIVE_BUCKET_ACCESS_KEY", "")
JIVE_BUCKET_ACCESS_SECRET = os.getenv("JIVE_BUCKET_ACCESS_SECRET", "")


S3_CLIENT = boto3.Session(aws_access_key_id=JIVE_BUCKET_ACCESS_KEY, aws_secret_access_key=JIVE_BUCKET_ACCESS_SECRET).client("s3")
