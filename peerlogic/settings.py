"""
Django settings for peerlogic project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""


import io
import logging
import os

import requests
from dotenv import load_dotenv


from google.cloud import pubsub_v1
from google.cloud import secretmanager

from requests.auth import HTTPBasicAuth

# Get an instance of a logger
log = logging.getLogger(__name__)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
}

PROJECT_ID = os.getenv("PROJECT_ID", "peerlogic-api-dev")
GOOGLE_CLOUD_PROJECT = os.environ.get("GOOGLE_CLOUD_PROJECT", None)  # WE'RE IN GCP
# TODO: get region from vm metadata: https://cloud.google.com/compute/docs/metadata/default-metadata-values
# https://cloud.google.com/appengine/docs/flexible/python/runtime#environment_variables
REGION = os.environ.get("REGION", "us-west4")
PROJECT_NUMBER = os.getenv("PROJECT_NUMBER", "148263976475")
ENV_CONFIG_SECRET_NAME = os.environ.get("ENV_CONFIG_SECRET_NAME", "peerlogic-api-env")

if GOOGLE_CLOUD_PROJECT:
    # Pull secrets from Secret Manager
    PROJECT_ID = os.environ.get("GOOGLE_CLOUD_PROJECT")

    client = secretmanager.SecretManagerServiceClient()
    name = f"projects/{PROJECT_ID}/secrets/{ENV_CONFIG_SECRET_NAME}/versions/latest"
    payload = client.access_secret_version(name=name).payload.data.decode("UTF-8")

    load_dotenv(stream=io.StringIO(payload))
else:
    load_dotenv()

GKE_APPLICATION = os.getenv("GKE_APPLICATION", False)

DEBUG = os.getenv("DJANGO_DEBUG", "True") == "True"

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")

ALLOWED_HOSTS = ["127.0.0.1", "localhost", os.getenv("DJANGO_ALLOWED_HOSTS", "*")]
if GKE_APPLICATION == "True":
    ALLOWED_HOSTS.append(os.getenv("KUBERNETES_SERVICE_HOST"))

IS_STAFF_TELECOM_DOMAN = os.getenv("IS_STAFF_TELECOM_DOMAN", "Peerlogic")

# Bandwidth
BANDWIDTH_APPLICATION_ID = os.getenv("BANDWIDTH_APPLICATION_ID")
BANDWIDTH_MESSAGING_URI = os.getenv("BANDWIDTH_MESSAGING_URI")
BANDWIDTH_API_USERNAME = os.getenv("BANDWIDTH_API_USERNAME")
BANDWIDTH_API_PASSWORD = os.getenv("BANDWIDTH_API_PASSWORD")
BANDWIDTH_CLIENT = requests.Session()
BANDWIDTH_CLIENT.auth = HTTPBasicAuth(BANDWIDTH_API_USERNAME, BANDWIDTH_API_PASSWORD)

# Netsapiens Communications Info
NETSAPIENS_CLIENT_ID = os.getenv("NETSAPIENS_CLIENT_ID")
NETSAPIENS_CLIENT_SECRET = os.getenv("NETSAPIENS_CLIENT_SECRET")
NETSAPIENS_BASE_URL = os.getenv("NETSAPIENS_BASE_URL")
NETSAPIENS_ACCESS_TOKEN_URL = os.getenv("NETSAPIENS_ACCESS_TOKEN_URL")
NETSAPIENS_INTROSPECT_TOKEN_URL = os.getenv("NETSAPIENS_INTROSPECT_TOKEN_URL")
NETSAPIENS_API_USERNAME = os.getenv("NETSAPIENS_API_USERNAME")
NETSAPIENS_API_PASSWORD = os.getenv("NETSAPIENS_API_PASSWORD")
NETSAPIENS_SYSTEM_CLIENT = requests.Session()
NETSAPIENS_INTEGRATION_CALL_MODEL_SUBSCRIPTION_IS_ENABLED = os.getenv("NETSAPIENS_INTEGRATION_CALL_MODEL_SUBSCRIPTION_IS_ENABLED", "False").lower() in ("true", "1", "t")
NETSAPIENS_INTEGRATION_CALL_ORIGID_MODEL_SUBSCRIPTION_IS_ENABLED = os.getenv("NETSAPIENS_INTEGRATION_CALL_ORIGID_MODEL_SUBSCRIPTION_IS_ENABLED", "False").lower() in ("true", "1", "t")

# Business Phone Number Detection
# See FCC: https://www.fcc.gov/consumers/guides/what-toll-free-number-and-how-does-it-work
TELECOM_AREA_CODES_TO_MARK_AS_BUSINESS_NUMBERS = os.getenv("AREA_CODES_TO_MARK_AS_BUSINESS_NUMBERS", ["800", "888", "877", "866", "855", "844", "833"])

# Twilio API CNAM / Phone Lookup Support
TWILIO_ACCOUNT_SID = os.getenv("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = os.getenv("TWILIO_AUTH_TOKEN")
TWILIO_IS_ENABLED = os.getenv("TWILIO_IS_ENABLED", "False").lower() in ("true", "1", "t")

TELECOM_CALLER_NAME_INFO_MAX_AGE_IN_SECONDS_DEFAULT = 60 * 60 * 24 * 365  # seconds in a year
try:
    TELECOM_CALLER_NAME_INFO_MAX_AGE_IN_SECONDS = int(os.getenv("TELECOM_CALLER_NAME_INFO_MAX_AGE_IN_SECONDS"))
except (ValueError, TypeError) as error:
    log.exception(error)
    log.info(f"Setting TELECOM_CALLER_NAME_INFO_MAX_AGE_IN_SECONDS to the default of {TELECOM_CALLER_NAME_INFO_MAX_AGE_IN_SECONDS_DEFAULT}")
    TELECOM_CALLER_NAME_INFO_MAX_AGE_IN_SECONDS = TELECOM_CALLER_NAME_INFO_MAX_AGE_IN_SECONDS_DEFAULT

# CORS
CORS_ORIGIN_ALLOW_ALL = DEBUG
CORS_ORIGIN_WHITELIST = ("http://localhost:3000", "app://.")

# DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
AUTH_USER_MODEL = "core.User"

# Pub/Sub
PUBLISHER = pubsub_v1.PublisherClient()
PUBSUB_TOPIC_ID_NETSAPIENS_LEG_B_FINISHED = os.getenv("PUBSUB_TOPIC_ID_NETSAPIENS_LEG_B_FINISHED", "dev-netsapiens-leg_b_finished")
PUBSUB_TOPIC_PATH_NETSAPIENS_LEG_B_FINISHED = PUBLISHER.topic_path(PROJECT_ID, PUBSUB_TOPIC_ID_NETSAPIENS_LEG_B_FINISHED)
PUBLISH_FUTURE_TIMEOUT_IN_SECONDS_DEFAULT = 60
try:
    PUBLISH_FUTURE_TIMEOUT_IN_SECONDS = int(os.getenv("PUBLISH_FUTURE_TIMEOUT_IN_SECONDS"))
except (ValueError, TypeError) as error:
    log.exception(error)
    log.info(f"Setting PUBLISH_FUTURE_TIMEOUT_IN_SECONDS to the default of {PUBLISH_FUTURE_TIMEOUT_IN_SECONDS_DEFAULT}")
    PUBLISH_FUTURE_TIMEOUT_IN_SECONDS = PUBLISH_FUTURE_TIMEOUT_IN_SECONDS_DEFAULT


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_filters",
    "rest_framework",
    "django_extensions",
    "django_celery_beat",
    "phonenumber_field",
    "peerlogic_admin",
    "corsheaders",
    "core",
    "calls",
    "etl",
    "inbox",
    "reminders",
    "netsapiens_integration",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_userforeignkey.middleware.UserForeignKeyMiddleware",
    "corsheaders.middleware.CorsMiddleware",
]

ROOT_URLCONF = "peerlogic.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "peerlogic.wsgi.application"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": ["core.authentication.JSONWebTokenAuthentication"],
    "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.IsAuthenticated"],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ],
    "PAGE_SIZE": 10,
}

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases


# [START dbconfig]
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("POSTGRES_USER"),
        "USER": os.getenv("POSTGRES_DB"),
        "PASSWORD": os.getenv("POSTGRES_PEERLOGIC_PASSWORD"),
        "HOST": os.getenv("DB_HOST", "127.0.0.1"),
        "PORT": "5432",
    }
}

# If the flag as been set, configure to use proxy
if os.getenv("USE_CLOUD_SQL_AUTH_PROXY", None) == "True":
    DATABASES["default"]["HOST"] = "127.0.0.1"
    DATABASES["default"]["PORT"] = 5432
# [END dbconfig]

# Use a in-memory sqlite3 database when testing in CI systems
if os.getenv("TRAMPOLINE_CI", None):
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

# [START staticurl]
if GKE_APPLICATION == "True":
    STATIC_BUCKET_NAME = PROJECT_ID
    STATIC_URL = f"https://storage.googleapis.com/{STATIC_BUCKET_NAME}/static/"
    STATIC_ROOT = "static/"
else:  # app engine or local
    STATIC_URL = "/static/"
    STATIC_ROOT = "static"
    STATICFILES_DIRS = []
# [END staticurl]


# Celery Configuration Options
CELERY_ENABLE_UTC = True
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60
CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", "redis://localhost:6379/0")
CELERY_RESULT_BACKEND = os.getenv("CELERY_RESULT_BACKEND", CELERY_BROKER_URL)

# Admin
X_FRAME_OPTIONS = "SAMEORIGIN"
