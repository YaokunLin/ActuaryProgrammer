# Copyright 2020 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License

# This file configures the peerlogic-api application . The frontend serves
# public web traffic.

# The bookshelf frontend replication controller ensures that at least 3
# instances of the bookshelf app are running on the cluster.
# For more info about Pods see:
#   https://cloud.google.com/container-engine/docs/pods/
# For more info about Deployments:
#   https://kubernetes.io/docs/user-guide/deployments/

# [START kubernetes_deployment]
apiVersion: apps/v1
kind: Deployment
metadata:
  name: peerlogic-api
  labels:
    app: peerlogic-api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: peerlogic-api
  template:
    metadata:
      labels:
        app: peerlogic-api
    spec:
      containers:
      - name: peerlogic-api-app
        # Replace  with your project ID or use `make template`
        image: gcr.io/peerlogic-api/peerlogic-api
        # This setting makes nodes pull the docker image every time before
        # starting the pod. This is useful when debugging, but should be turned
        # off in production.
        imagePullPolicy: Always
        env:
            # [START cloudsql_secrets]
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: cloudsql-dev
                  key: POSTGRES_DB
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: cloudsql-dev
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: cloudsql-dev
                  key: POSTGRES_PASSWORD
            # [END cloudsql_secrets]
            # [START peerlogic-dev_secrets]
            - name: DJANGO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: django-dev
                  key: DJANGO_SECRET_KEY
            # [END peerlogic-dev_secrets]
            # [START netsapiens_secrets]
            - name: NS_BASE_URL
              valueFrom:
                secretKeyRef:
                  name: netsapiens-dev
                  key: NS_BASE_URL
            - name: NS_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: netsapiens-dev
                  key: NS_CLIENT_ID
            - name: NS_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: netsapiens-dev
                  key: NS_CLIENT_SECRET
            - name: NS_API_USER
              valueFrom:
                secretKeyRef:
                  name: netsapiens-dev
                  key: NS_API_USER
            - name: NS_API_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: netsapiens-dev
                  key: NS_API_PASSWORD
            # [START netsapiens_secrets]
            - name: DJANGO_DB_REQUIRE_SSL
              value: "False"
            - name: DJANGO_EMAIL_BACKEND
              value: django.core.mail.backends.console.EmailBackend
            - name: CELERY_BROKER_URL
              value: "redis://10.157.148.115:6379/0"
            - name: CELERY_RESULT_BACKEND
              value: "redis://10.157.148.115:6379/0"
            - name: DJANGO_DEBUG
              value: "False"
            - name: GKE_APPLICATION
              value: "True"
        ports:
        - containerPort: 8080

      - name: peerlogic-api-celery
        command: ["celery", "-A", "peerlogic", "worker", "-l", "INFO"]
        # Replace  with your project ID or use `make template`
        image: gcr.io/peerlogic-api/peerlogic-api
        # This setting makes nodes pull the docker image every time before
        # starting the pod. This is useful when debugging, but should be turned
        # off in production.
        imagePullPolicy: Always
        env:
            # [START cloudsql_secrets]
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: cloudsql-dev
                  key: POSTGRES_DB
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: cloudsql-dev
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: cloudsql-dev
                  key: POSTGRES_PASSWORD
            # [END cloudsql_secrets]
            # [START peerlogic-dev_secrets]
            - name: DJANGO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: django-dev
                  key: DJANGO_SECRET_KEY
            # [END peerlogic-dev_secrets]
            # [START netsapiens_secrets]
            - name: NS_BASE_URL
              valueFrom:
                secretKeyRef:
                  name: netsapiens-dev
                  key: NS_BASE_URL
            - name: NS_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: netsapiens-dev
                  key: NS_CLIENT_ID
            - name: NS_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: netsapiens-dev
                  key: NS_CLIENT_SECRET
            - name: NS_API_USER
              valueFrom:
                secretKeyRef:
                  name: netsapiens-dev
                  key: NS_API_USER
            - name: NS_API_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: netsapiens-dev
                  key: NS_API_PASSWORD
            # [START netsapiens_secrets]
            - name: DJANGO_DB_REQUIRE_SSL
              value: "False"
            - name: DJANGO_EMAIL_BACKEND
              value: django.core.mail.backends.console.EmailBackend
            - name: CELERY_BROKER_URL
              value: "redis://10.157.148.115:6379/0"
            - name: CELERY_RESULT_BACKEND
              value: "redis://10.157.148.115:6379/0"
            - name: DJANGO_DEBUG
              value: "False"
            - name: GKE_APPLICATION
              value: "True"
      # [START proxy_container]
      - image: gcr.io/cloudsql-docker/gce-proxy:1.16
        name: cloudsql-proxy
        command: ["/cloud_sql_proxy", "--dir=/cloudsql",
                  "-instances=peerlogic-api:us-west3:peerlogic-dev=tcp:5432",
                  "-credential_file=/secrets/cloudsql/credentials.json"]
        volumeMounts:
          - name: cloudsql-oauth-credentials
            mountPath: /secrets/cloudsql
            readOnly: true
          - name: ssl-certs
            mountPath: /etc/ssl/certs
          - name: cloudsql-dev
            mountPath: /cloudsql
      # [END proxy_container]
      # [START volumes]
      volumes:
        - name: cloudsql-oauth-credentials
          secret:
            secretName: cloudsql-oauth-credentials
        - name: ssl-certs
          hostPath:
            path: /etc/ssl/certs
        - name: cloudsql-dev
          emptyDir: {}
      # [END volumes]
# [END kubernetes_deployment]

---

# [START service]
# The peerlogic-api service provides a load-balancing proxy over the peerlogic-api app
# pods. By specifying the type as a 'LoadBalancer', Container Engine will
# create an external HTTP load balancer.
# For more information about Services see:
#   https://cloud.google.com/container-engine/docs/services/
# For more information about external HTTP load balancing see:
#   https://cloud.google.com/container-engine/docs/load-balancer
apiVersion: v1
kind: Service
metadata:
  name: peerlogic-api
  labels:
    app: peerlogic-api
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: peerlogic-api
# [END service]
